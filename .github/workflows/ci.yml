name: CI

on:
  push:
    branches:
      - 'main'
      - 'versions/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - '**'

jobs:
  docker-main-branch:
    # Only run on tag push events starting with v prefix for now OR main branch push events
    if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      -
        run: sudo apt-get update && sudo apt-get install -y jq
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            tdupont/community-server
          # edge will always be executed (without latest tag), semver only on tag push events (with latest tag)
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          github-token: ${{ secrets.github_token }}
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: tdupont
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Build and export to docker
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - 
        name: Store generated tags
        shell: bash
        run: |
          myvar=$(cat << 'EOF'
          ${{ toJSON(fromJSON(steps.meta.outputs.json).tags) }}
          EOF
          )
          echo 'generated_tags<<EOM' >> $GITHUB_ENV
          echo "$myvar" >> $GITHUB_ENV
          echo 'EOM' >> $GITHUB_ENV
      - 
        name: "Test all docker built image tags"
        shell: bash
        run: |
          jq -rc '.[]' <<< '${{env.generated_tags}}' | while read i; do
            docker run --rm --pull never $i --version
          done;
      - 
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker-versions-branch:
    # needs:
    #   - lint
    #   - test-unit
    #   - test-integration
    #   - test-integration-windows
    #   - test-configs
    # Only run on push events on a versions/* branch (ASSUMPTION: THERE SHOULD ONLY BE ONE THERE!)
    if: startsWith(github.ref, 'refs/heads/versions/')
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            tdupont/community-server
          # Just one label: next (no latest here) for the last pushed commit on this branch
          tags: |
            type=raw,value=next
          github-token: ${{ secrets.github_token }}
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: tdupont
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Build and export to docker
        uses: docker/build-push-action@v3
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - 
        name: "Test docker image 'next'"
        run: |
          docker run --rm --pull never tdupont/community-server:next --version
      - 
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  typedocs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - run: npm ci --ignore-scripts
      - run: npm run typedocs
      - name: Save docs
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs
          retention-days: 1

  mkdocs-tag:
    runs-on: ubuntu-latest
    # Only trigger on tagged release that doesn't have a prerelease qualifier (like -alpha, -beta, -rc)
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    needs:
      - docker-main-branch
      - typedocs
    steps:
      - uses: actions/checkout@v2
      - id: get_version
        uses: battila7/get-version-action@v2
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - run: pip install mkdocs-material 
      - run: pip install mike
      - run: git config user.name ci-bot
      - run: git config user.email ci-bot@example.com
      - run: git fetch origin gh-pages --depth=1
      - run: cd documentation && mike deploy --push --update-aliases ${{steps.get_version.outputs.major}}.x latest
  
  mkdocs-latest:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - docker-main-branch    
      - typedocs
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - run: pip install mkdocs-material 
      - run: pip install mike
      - run: sudo apt-get update && sudo apt-get install -y jq
      - run: git config user.name ci-bot
      - run: git config user.email ci-bot@example.com
      - run: git fetch origin gh-pages --depth=1
      - run: VERSION=$(curl -s https://communitysolidserver.github.io/CommunitySolidServer/versions.json | jq '.[] | select(.aliases[] | contains("latest")).version')
      - run: cd documentation && mike deploy --push --update-aliases ${VERSION} latest

  publish-docs:
    needs:
      - mkdocs-tag
      # - lint
      # - test-unit
      # - test-integration
      # - test-integration-windows
      # - test-configs
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs
      - id: get_version
        uses: battila7/get-version-action@v2
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir:  ${{steps.get_version.outputs.major}}.${{steps.get_version.outputs.minor}}/docs
